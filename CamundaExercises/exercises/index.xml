<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Camunda BPM for Java Developers</title>
    <link>/</link>
    <description>Recent content on Camunda BPM for Java Developers</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Draw a Twitter QA Process Model</title>
      <link>/exercise0.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/exercise0.html</guid>
      <description>

&lt;h3 id=&#34;goal&#34;&gt;Goal&lt;/h3&gt;

&lt;p&gt;Discuss as a group a common process model to fulfill the needs of Anti Agile Inc.&lt;/p&gt;

&lt;h3 id=&#34;short-description&#34;&gt;Short description&lt;/h3&gt;

&lt;p&gt;Try to find the activities and events of the process to fulfill the needs of Anti Agile Inc. Model the process on a whiteboard or flipchart.&lt;/p&gt;

&lt;h3 id=&#34;detailed-steps&#34;&gt;Detailed Steps&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Discuss the requirements of Anti Agile Inc.&lt;/li&gt;
&lt;li&gt;Model the Twitter QA process as a group on a whiteboard or flipchart.&lt;/li&gt;
&lt;li&gt;Discuss the process model(s) with the trainer afterwards.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Model Twitter QA in the Camunda Modeler</title>
      <link>/exercise1.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/exercise1.html</guid>
      <description>

&lt;h3 id=&#34;goal&#34;&gt;Goal&lt;/h3&gt;

&lt;p&gt;The goal of this lab is to create a process application from the Maven archetype  and use the generated &lt;code&gt;process.bpmn&lt;/code&gt; to model the Twitter QA process in Camunda Modeler.&lt;/p&gt;

&lt;h3 id=&#34;short-description&#34;&gt;Short description&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Download the Camunda Modeler.&lt;/li&gt;
&lt;li&gt;Create a process application from the Camunda Archetype &lt;code&gt;camunda-archetype-ejb-war&lt;/code&gt; and name it &lt;code&gt;twitter-qa&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Open the generated empty process from the resources in the Camunda Modeler and model the process from Lab 0.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;detailed-steps&#34;&gt;Detailed steps&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Download the Camunda Modeler from the &lt;a href=&#34;http://camunda.org/download/modeler/&#34; target=&#34;_blank&#34;&gt;official download page&lt;/a&gt; or use the version provided by your instructor.&lt;/li&gt;
&lt;li&gt;Unpack the downloaded archive and start the Modeler. Register the .bpmn, .cmmn and .dmn file extension with the Camunda Modeler.&lt;/li&gt;
&lt;li&gt;Start Eclipse and create a new Camunda BPM project in your workspace using our Maven archetypes. &lt;a href=&#34;http://docs.camunda.org/manual/latest/user-guide/process-applications/maven-archetypes/&#34; target=&#34;_blank&#34;&gt;
(docs.camunda.org/manual/latest/user-guide/process-applications/maven-archetypes/)&lt;/a&gt; Navigate to File -&amp;gt; New -&amp;gt; Project&amp;hellip; -&amp;gt; Maven -&amp;gt; Maven Project.&lt;/li&gt;
&lt;li&gt;Check if you have configured the Camunda Archetype Catalog &lt;a href=&#34;https://docs.camunda.org/manual/latest/user-guide/process-applications/maven-archetypes/#detailed-instructions&#34; target=&#34;_blank&#34;&gt; docs.camunda.org/manual/latest/user-guide/process-applications/maven-archetypes/#detailed-instructions&lt;/a&gt; in your Eclipse IDE.&lt;/li&gt;
&lt;li&gt;On the second page of the wizard, type &lt;code&gt;camunda&lt;/code&gt; into the filter field and select the archetype &lt;code&gt;camunda-archetype-ejb-war&lt;/code&gt;. Name the project &lt;code&gt;twitter-qa&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Have a look at which files have been generated by the archetype to get an overview.&lt;/li&gt;
&lt;li&gt;Open the empty process model generated by the archetype in the folder &amp;lsquo;src/main/resources&amp;rsquo; with the Camunda Modeler and model the Twitter QA process from Lab 0.&lt;/li&gt;
&lt;li&gt;Save your work, which will save the BPMN 2.0 XML to your disk as well. If you want, take a look at it using the XML tab.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Install Camunda BPM Platform</title>
      <link>/exercise2a.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/exercise2a.html</guid>
      <description>

&lt;h3 id=&#34;goal&#34;&gt;Goal&lt;/h3&gt;

&lt;p&gt;The goal of this lab is to install the Camunda BPM platform on your machine.&lt;/p&gt;

&lt;h3 id=&#34;short-description&#34;&gt;Short description&lt;/h3&gt;

&lt;p&gt;We use the pre-packaged Wildfly distribution, which consists of
a Wildfly server with Camunda BPM installed and using a local H2 database file. For production environments, you will usually change at least the database.&lt;/p&gt;

&lt;h3 id=&#34;detailed-steps&#34;&gt;Detailed steps&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Download Camunda BPM for Wildfly from the official download page
&lt;a href=&#34;http://camunda.org/download/&#34; target=&#34;_blank&#34;&gt;camunda.org/download/&lt;/a&gt; or use the version provided by your instructor.&lt;/li&gt;
&lt;li&gt;Unpack the downloaded archive. Start the application server with the process engine by using:
&lt;code&gt;start-camunda.(sh|bat)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Check the output of the console window. If the line
&lt;code&gt;WildFly Full 10.0.0.Final (WildFly Core 2.0.10.Final) started in nnn ms - Started nnn of mmmm services (nnn services are lazy, passive or on-demand)&lt;/code&gt;
appears, the server is up and running.&lt;/li&gt;
&lt;li&gt;Let&amp;rsquo;s have a first look at the Web applications:
Open the Camunda BPM welcome page &lt;a href=&#34;http://localhost:8080/camunda-welcome&#34; target=&#34;_blank&#34;&gt; localhost:8080/camunda-welcome&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Log in with user &lt;code&gt;demo&lt;/code&gt;, password &lt;code&gt;demo&lt;/code&gt; and inspect the tasklist.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Deploy the Prototype on Camunda BPM</title>
      <link>/exercise2b.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/exercise2b.html</guid>
      <description>

&lt;h3 id=&#34;goal&#34;&gt;Goal&lt;/h3&gt;

&lt;p&gt;The goal of this lab is to make your Twitter QA process executable
and run it on the Camunda BPM platform installed on your machine.&lt;/p&gt;

&lt;h3 id=&#34;short-description&#34;&gt;Short description&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fill all required properties in the property panel of the Camunda Modeler to make the process executable. Model the services as script task with a script just print something to the console. Set the candidate group to &lt;code&gt;management&lt;/code&gt; and model the conditions on the sequence flows as &lt;code&gt;approved&lt;/code&gt; or &lt;code&gt;not approved&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Build the process application and deploy it to the wildfly server.&lt;/li&gt;
&lt;li&gt;Try your process in the tasklist filling the generic forms.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;detailed-steps&#34;&gt;Detailed steps&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Set the candidate group of the user task to &lt;code&gt;management&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Set the conditions of the outgoing sequence flows of the exclusive gateway to &lt;code&gt;#{approved}&lt;/code&gt; and &lt;code&gt;#{not approved}&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Morph the automated tasks into script tasks, set their script language to &lt;code&gt;JavaScript&lt;/code&gt; and their script to: &lt;code&gt;print(&#39;Hello World!\n&#39;);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Now deploy the process to Camunda BPM: Right-click on the Eclipse project and select &lt;code&gt;Run As -&amp;gt; Maven build&lt;/code&gt;. Then add the goals &lt;code&gt;clean wildfly:deploy&lt;/code&gt; and press &lt;code&gt;Run&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;After the build is finished, you can start your process using Camunda Tasklist &lt;a href=&#34;http://localhost:8080/camunda/app/tasklist/&#34; target=&#34;_blank&#34;&gt;localhost:8080/camunda/app/tasklist/&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Fill the generic forms and walk through your process.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Run the First JUnit Test</title>
      <link>/exercise3a.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/exercise3a.html</guid>
      <description>

&lt;h3 id=&#34;goal&#34;&gt;Goal&lt;/h3&gt;

&lt;p&gt;The goal of this lab is, that you build your first JUnit test case for a BPMN 2.0 process with the help of &lt;a href=&#34;https://github.com/camunda/camunda-bpm-assert&#34; target=&#34;_blank&#34;&gt;camunda-bpm-assert&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;short-description&#34;&gt;Short description&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Strip down the process to the happy path. Morph the user task to a manual task. Set the conditions to &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Prepare your content assist to the camunda-bpm-assert library.&lt;/li&gt;
&lt;li&gt;Fill the generated InMemory JUnit test and assert that a started process instance is ended right after the start.&lt;/li&gt;
&lt;li&gt;Have a look at the Camunda BPM Assert Library &lt;a href=&#34;https://github.com/camunda/camunda-bpm-assert/blob/master/camunda-bpm-assert/README.md&#34; target=&#34;_blank&#34;&gt;User Guide&lt;/a&gt; to get more information about the test library.&lt;/li&gt;
&lt;li&gt;Run the JUnit test to see the green bar. Check the Output of the scipts in the console.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;detailed-steps&#34;&gt;Detailed steps&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Edit your BPMN model in the Modeler and strip down the process to the happy path. Morph the user task to a manual task. Set the conditions on the sequence flows to &lt;code&gt;${true}&lt;/code&gt; and &lt;code&gt;${false}&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Two JUnit test cases have been created in &lt;code&gt;src/test/java&lt;/code&gt;. Open and inspect the &amp;lsquo;InMemoryH2Test&amp;rsquo;.&lt;/li&gt;
&lt;li&gt;In Eclipse go to &lt;code&gt;Window -&amp;gt; Preferences -&amp;gt; Java -&amp;gt; Editor -&amp;gt; Content Assist -&amp;gt; Favorites -&amp;gt; New Type...&lt;/code&gt; and add the following type: &lt;code&gt;org.camunda.bpm.engine.test.assertions.ProcessEngineTests&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Change the happy path test method that deploys the process using the @Deyployment annotation and start a process instance using the Runtime Service, which is available via &lt;code&gt;runtimeService()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add an assert to verify, that the process instance is ended: You can use this code: &lt;code&gt;assertThat(processInstance).isEnded();&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Have a look at the Camunda BPM Assert Library &lt;a href=&#34;https://github.com/camunda/camunda-bpm-assert/blob/master/camunda-bpm-assert/README.md&#34; target=&#34;_blank&#34;&gt;User Guide&lt;/a&gt; to get more information about the test library.&lt;/li&gt;
&lt;li&gt;Run the JUnit test (right click on the method and select &lt;code&gt;Run As -&amp;gt; JUnit Test&lt;/code&gt;). You should get a green bar. Can you see the ouput of your script task in the console?&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Add a Java Delegate to Publish on Twitter</title>
      <link>/exercise3b.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/exercise3b.html</guid>
      <description>

&lt;h3 id=&#34;goal&#34;&gt;Goal&lt;/h3&gt;

&lt;p&gt;The Goal of this lab is to use a JavaDelegate in the service task to publish on twitter.&lt;/p&gt;

&lt;h3 id=&#34;short-description&#34;&gt;Short description&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Add the dependency for the Twitter4j library to your pom file.&lt;/li&gt;
&lt;li&gt;Create a Class implementing the JavaDelegate interface.&lt;/li&gt;
&lt;li&gt;Add the code to create a constant content and publish this on twitter.&lt;/li&gt;
&lt;li&gt;Configure this class in the service task.&lt;/li&gt;
&lt;li&gt;Test your implementation with the JUnit test.&lt;/li&gt;
&lt;li&gt;Check your tweet online on Twitter &lt;a href=&#34;http://twitter.com/camunda_demo&#34; target=&#34;_blank&#34;&gt;twitter.com/camunda_demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;detailed-steps&#34;&gt;Detailed steps&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Add dependencies for the Twitter4j API to your project. Therefore, edit the pom.xml to add the following lines within the &lt;code&gt;&amp;lt;dependencies&amp;gt;&lt;/code&gt; element:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.twitter4j&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;twitter4j-core&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;3.0.5&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a new Java class in your Eclipse project and name it &lt;code&gt;CreateTweetDelegate&lt;/code&gt;. It must implement the &lt;code&gt;JavaDelegate&lt;/code&gt; interface.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The example code below shows how to create an authenticated Twitter instance and use it to tweet. You can copy and paste the code but make sure you change the &lt;code&gt;content&lt;/code&gt; variable!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CreateTweetDelegate implements JavaDelegate {
  private final Logger LOGGER = LoggerFactory.getLogger(CreateTweetDelegate.class.getName());

  public void execute(DelegateExecution execution) throws Exception {
    String content = &amp;quot;I did it! Cheers YOUR NAME HERE&amp;quot;;
    LOGGER.info(&amp;quot;Publishing tweet: &amp;quot; + content);
    AccessToken accessToken = new AccessToken(&amp;quot;220324559-jet1dkzhSOeDWdaclI48z5txJRFLCnLOK45qStvo&amp;quot;, &amp;quot;B28Ze8VDucBdiE38aVQqTxOyPc7eHunxBVv7XgGim4say&amp;quot;);
    Twitter twitter = new TwitterFactory().getInstance();
    twitter.setOAuthConsumer(&amp;quot;lRhS80iIXXQtm6LM03awjvrvk&amp;quot;, &amp;quot;gabtxwW8lnSL9yQUNdzAfgBOgIMSRqh7MegQs79GlKVWF36qLS&amp;quot;);
    twitter.setOAuthAccessToken(accessToken);  
    twitter.updateStatus(content);
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you are behind a proxy, create a file called &amp;ldquo;twitter4j.properties&amp;rdquo; with the following content in the main/resources directory of your project or use the file provided by your instructor:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http.proxyHost=your.proxy.host
http.proxyPort=8080
http.proxyUser=foo
http.proxyPassword=bar
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Morph the Script Task &lt;code&gt;Publish on Twitter&lt;/code&gt; into a Service Task.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the properties of the Service Task enter the full qualified name of &lt;code&gt;CreateTweetDelegate&lt;/code&gt; as its implementation.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run your Unit-Test, you should see a green bar.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check your tweet online on Twitter &lt;a href=&#34;http://twitter.com/camunda_demo&#34; target=&#34;_blank&#34;&gt;twitter.com/camunda_demo&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Add Process Variables and Implement Gateway</title>
      <link>/exercise4.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/exercise4.html</guid>
      <description>

&lt;h3 id=&#34;goal&#34;&gt;Goal&lt;/h3&gt;

&lt;p&gt;In this lab you change your JavaDelegate to read the content from a process variable. Additionally we will implement an Exclusive Data-based Gateway (decision) to the process, so that you only post to Twitter if some boolean process variable is set to true.&lt;/p&gt;

&lt;h3 id=&#34;short-description&#34;&gt;Short description&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Add the content at the process instance start.&lt;/li&gt;
&lt;li&gt;Use the content in the Java Delegate to send it to Twitter and test your changes.&lt;/li&gt;
&lt;li&gt;Change the conditions after the gateway to move forward according to the review result.&lt;/li&gt;
&lt;li&gt;Add the review result at the start of process instance and test your changes.&lt;/li&gt;
&lt;li&gt;Think about strategies to test if you pass by the CreateTweetDelegate (and maybe skip the call to Twitter to make a real unit test).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;detailed-steps&#34;&gt;Detailed steps&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Start the process instance with the tweet content provided as a process variable. Therefore, go to the JUnit test case and create a variable map of type &lt;code&gt;Map&amp;lt;String, Object&amp;gt;&lt;/code&gt;. Put your own process variable in this map, e.g. named &lt;code&gt;content&lt;/code&gt;. Then pass the variable map to the process instance.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Exchange the hard coded tweet content in CreateTweetDelegate with the content of that process variable. Make sure you use the same name as in the JUnit test, e.g. &amp;ldquo;content&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;String content = // TODO: retrieve a process variable here
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run the JUnit test case. You should see the content from the test case on &lt;a href=&#34;http://twitter.com/camunda_demo&#34; target=&#34;_blank&#34;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You can add expressions to the Sequence Flows that control which way a token will go. Add the expression &lt;code&gt;#{approved}&lt;/code&gt; to the Sequence Flow to the Service Task, and &lt;code&gt;#{not approved}&lt;/code&gt; to the other one (or leave it blank and declare the Sequence Flow as Default Flow, comparable to the default branch of a switch statement in Java). You can find more information on this in the BPMN 2.0 Implementation Reference &lt;a href=&#34;https://docs.camunda.org/manual/latest/reference/bpmn20/gateways/sequence-flow/#default-sequence-flow&#34; target=&#34;_blank&#34;&gt; docs.camunda.org/manual/latest/reference/bpmn20/gateways/sequence-flow/#default-sequence-flow&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You have to add a process variable &lt;code&gt;approved&lt;/code&gt; to your process variables in the JUnit test case, depending if it is set to true or false, you should see your content on &lt;a href=&#34;http://twitter.com/camunda_demo&#34; target=&#34;_blank&#34;&gt;Twitter&lt;/a&gt; or not.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Think about strategies to test if you pass by the CreateTweetDelegate (and maybe skip the call to Twitter to make a real unit test).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Optional: Generate a &lt;a href=&#34;https://github.com/camunda/camunda-bpm-process-test-coverage&#34; target=&#34;_blank&#34;&gt;Process Test Coverage report&lt;/a&gt; for your test class.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Add User Tasks</title>
      <link>/exercise5.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/exercise5.html</guid>
      <description>

&lt;h3 id=&#34;goal&#34;&gt;Goal&lt;/h3&gt;

&lt;p&gt;Add a User Task to review the tweet to your process and test it within your JUnit test. Use the Java API to control the task work.&lt;/p&gt;

&lt;h3 id=&#34;short-description&#34;&gt;Short description&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Change the manual tasks to user tasks.&lt;/li&gt;
&lt;li&gt;Add the tasks to the &lt;code&gt;management&lt;/code&gt; group.&lt;/li&gt;
&lt;li&gt;Extend the JUnit test to query for the user task and complete it.&lt;/li&gt;
&lt;li&gt;Assert the expected state of the process instance and the tasks.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;detailed-steps&#34;&gt;Detailed steps&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Morph the manual task(s) into a user task(s).&lt;/li&gt;
&lt;li&gt;Set the &lt;code&gt;candidate-groups&lt;/code&gt; of the review task to &lt;code&gt;management&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Improve the test case from the last lab to query tasks from the task list (maybe add some assertions) and complete this tasks via the API (see &lt;a href=&#34;https://docs.camunda.org/javadoc/camunda-bpm-platform/7.6/index.html?org/camunda/bpm/engine/TaskService.html) for more information&#34; target=&#34;_blank&#34;&gt;Java Docs&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Change the test case to create the &amp;ldquo;approved&amp;rdquo; process variable when completing the task, and not already when starting the process instance.&lt;/li&gt;
&lt;li&gt;Run the test case and check for the green bar.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Add Task Forms, Deploy the Process to the Server and Use the Camunda Tasklist</title>
      <link>/exercise6.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/exercise6.html</guid>
      <description>

&lt;h3 id=&#34;goal&#34;&gt;Goal&lt;/h3&gt;

&lt;p&gt;In this lab you add some simple task forms to your process and deploy the project to the Camunda BPM platform. Then you are able to click through the process with the Camunda Tasklist. This means our little lab process is completed and working :-)&lt;/p&gt;

&lt;p&gt;In order to have forms displayed to the user in the web gui you have to define what data should be displayed on that forms. The Camunda Tasklist supports four different approaches to task forms: generic forms, generated forms, embedded HTML forms and external Web pages. In this lab we will use embedded HTML forms and create simple HTML pages.&lt;/p&gt;

&lt;p&gt;Detailed information on the use of Embedded Forms can be found in the &lt;a href=&#34;https://docs.camunda.org/manual/latest/user-guide/task-forms/#embedded-task-forms&#34; target=&#34;_blank&#34;&gt;User Guide&lt;/a&gt; and in the &lt;a href=&#34;https://docs.camunda.org/manual/latest/reference/embedded-forms/&#34; target=&#34;_blank&#34;&gt;Embedded Forms Reference&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;short-description&#34;&gt;Short description&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Edit the HTML forms that were generated by the maven archetype.&lt;/li&gt;
&lt;li&gt;Bind the forms in the form key to the user tasks and events.&lt;/li&gt;
&lt;li&gt;Deploy the process application to the application server.&lt;/li&gt;
&lt;li&gt;Start a process instance in the task list and run through it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;detailed-steps&#34;&gt;Detailed steps&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Have a look at the HTML forms generated by the Maven Archetype in &lt;code&gt;src/main/webapp/forms&lt;/code&gt; and use them for your process.&lt;/li&gt;
&lt;li&gt;Edit the form fields according to your process variables that you specified in the JUnit test.&lt;/li&gt;
&lt;li&gt;Set the form key of the start event (or the write tweet user task) to &lt;code&gt;embedded:app:forms/start-form.html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set the form key of the review tweet user task to &lt;code&gt;embedded:app:forms/task-form.html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Now deploy the process to Camunda BPM: Right-click on the Eclipse project and select &lt;code&gt;Run As -&amp;gt; Maven build&lt;/code&gt;. Eclipse should have rembered the Maven goals &lt;code&gt;clean wildfly:deploy&lt;/code&gt; in a run configuration from the last time you ran it. If not, a dialog should appear, in which you can enter them.&lt;/li&gt;
&lt;li&gt;Watch the WildFly console and see how the process gets deployed automatically.&lt;/li&gt;
&lt;li&gt;After deploying you can start a process instance in &lt;a href=&#34;http://localhost:8080/camunda/app/tasklist/&#34; target=&#34;_blank&#34;&gt;Camunda Tasklist&lt;/a&gt; by going to &amp;lsquo;Start Process&amp;rsquo; and select your process. After submitting the data you can go to the task list and click through the rest of the process.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;hints&#34;&gt;Hints&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;If you deploy multiple times because of testing, you will see the versioning capabilities of Camunda BPM. Please ask your instructor for any questions on the Tasklist web application.&lt;/li&gt;
&lt;li&gt;In Tasklist, you can see the status of a running process instance. Have a look and play around with it!&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Complete the Test Coverage</title>
      <link>/exercise7.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/exercise7.html</guid>
      <description>

&lt;h3 id=&#34;goal&#34;&gt;Goal&lt;/h3&gt;

&lt;p&gt;In this lab you add the Junit methods to complete the test coverage. Use &lt;a href=&#34;https://github.com/camunda/camunda-bpm-assert/blob/master/camunda-bpm-assert/README.md&#34; target=&#34;_blank&#34;&gt;camunda-bpm-assert-shortcuts&lt;/a&gt; and use &lt;a href=&#34;https://docs.camunda.org/manual/latest/user-guide/process-engine/process-instance-modification/#process-instance-modification-in-junit-tests&#34; target=&#34;_blank&#34;&gt;process instance modifications&lt;/a&gt; for this.&lt;/p&gt;

&lt;h3 id=&#34;short-description&#34;&gt;Short description&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Add a new JUnit test method with the process deployed.&lt;/li&gt;
&lt;li&gt;Start the process directly before the unit you want to test.&lt;/li&gt;
&lt;li&gt;Assert that the unit has the expected result.&lt;/li&gt;
&lt;li&gt;Inspect the test coverage.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;detailed-steps&#34;&gt;Detailed steps&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Add an new method to your JUnit test. Use the &lt;code&gt;@Deployment&lt;/code&gt; annotation to deploy the process to test into the process engine.&lt;/li&gt;
&lt;li&gt;Create the process instance with the &lt;a href=&#34;https://docs.camunda.org/manual/latest/user-guide/process-engine/process-instance-modification/#process-instance-modification-in-junit-tests&#34; target=&#34;_blank&#34;&gt;process instance modifications&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Set the state of the process by setting all needed process variables with the right value.&lt;/li&gt;
&lt;li&gt;Move the token before the element you want to test.&lt;/li&gt;
&lt;li&gt;Assert the expected state of the process.&lt;/li&gt;
&lt;li&gt;Check the process test coverage in the target-folder.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Camunda BPM REST API</title>
      <link>/exercise8.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/exercise8.html</guid>
      <description>

&lt;h3 id=&#34;goal&#34;&gt;Goal&lt;/h3&gt;

&lt;p&gt;In this lab you get to know the REST API provided by Camunda BPM. The list of all API calls is in the &lt;a href=&#34;https://docs.camunda.org/manual/latest/reference/rest/&#34; target=&#34;_blank&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;short-description&#34;&gt;Short description&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Open a rest client and get all process definitions.&lt;/li&gt;
&lt;li&gt;Start a process instance of the Twitter-QA process.&lt;/li&gt;
&lt;li&gt;Query for tasks.&lt;/li&gt;
&lt;li&gt;Claim and complete the tasks.&lt;/li&gt;
&lt;li&gt;Check the result on &lt;a href=&#34;http://twitter.com/camunda_demo&#34; target=&#34;_blank&#34;&gt;Twitter&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Check the completed process instance.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;detailed-steps&#34;&gt;Detailed steps&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Open a REST client like Postman: &lt;a href=&#34;https://www.getpostman.com/&#34; target=&#34;_blank&#34;&gt;www.getpostman.com/&lt;/a&gt; for Chrome or RESTClient for Firefox: &lt;a href=&#34;https://addons.mozilla.org/de/firefox/addon/restclient/&#34; target=&#34;_blank&#34;&gt;addons.mozilla.org/de/firefox/addon/restclient&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The entry point for the REST API is: &lt;a href=&#34;http://localhost:8080/engine-rest/&#34; target=&#34;_blank&#34;&gt;localhost:8080/engine-rest/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Query for all process definitions with a get request to ensure that the Twitter QA Process is available. &lt;a href=&#34;https://docs.camunda.org/manual/latest/reference/rest/process-definition/get-query/&#34; target=&#34;_blank&#34;&gt;Get List&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Start a process instance of the latest version and pass the content variable. &lt;a href=&#34;https://docs.camunda.org/manual/latest/reference/rest/process-definition/post-start-process-instance/&#34; target=&#34;_blank&#34;&gt;Start Instance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Query for the user task of the started process instance. &lt;a href=&#34;https://docs.camunda.org/manual/latest/reference/rest/task/get-query/&#34; target=&#34;_blank&#34;&gt;Get List&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Claim the task for the user &lt;code&gt;demo&lt;/code&gt;. &lt;a href=&#34;https://docs.camunda.org/manual/latest/reference/rest/task/post-claim/&#34; target=&#34;_blank&#34;&gt;Claim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Complete the task and pass the review result as a variable. &lt;a href=&#34;https://docs.camunda.org/manual/latest/reference/rest/task/post-complete/&#34; target=&#34;_blank&#34;&gt;Complete&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Check the completed process instance in the history. &lt;a href=&#34;https://docs.camunda.org/manual/latest/reference/rest/history/process-instance/get-process-instance-query/&#34; target=&#34;_blank&#34;&gt;Get List&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Replace User Task by Business Rules Task</title>
      <link>/exercise9.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/exercise9.html</guid>
      <description>

&lt;h3 id=&#34;goal&#34;&gt;Goal&lt;/h3&gt;

&lt;p&gt;In this lab you should make your business process for tweet approval to a fully automated process. For this you should change the review of the tweet to a business rules task and judge the tweet with rules modeled in DMN (Decision Model and Notation).&lt;/p&gt;

&lt;h3 id=&#34;short-description&#34;&gt;Short description&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Create a decision table with rule to decide about approvement and rejection of tweets&lt;/li&gt;
&lt;li&gt;Save the decision table in your process application.&lt;/li&gt;
&lt;li&gt;Write a test methods to test the decision table.&lt;/li&gt;
&lt;li&gt;Integrate the decison table with a business rule task into your process and test the process under JUnit.&lt;/li&gt;
&lt;li&gt;Deploy the process application and run the process in the task list.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;detailed-steps&#34;&gt;Detailed steps&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Open the a new DMN diagram in the Camunda Modeler.&lt;/li&gt;
&lt;li&gt;Fill the table with the informations from the buiness user.

&lt;ol&gt;
&lt;li&gt;Name the table.&lt;/li&gt;
&lt;li&gt;Name the input and output columns. Use content and email as input.&lt;/li&gt;
&lt;li&gt;Add some rules to accept or reject rules. For example &amp;lsquo;camunda can be published&amp;rsquo;, &amp;lsquo;tweets by &amp;ldquo;jakob.freund@camunda.org&amp;rdquo; can be published&amp;rsquo;, &amp;lsquo;tweets by john.doe@camunda.com must be rejected&amp;rsquo;, &amp;lsquo;Jim may not be mentioned on Twitter&amp;rsquo;, &amp;hellip;&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Switch to the advanced mode.&lt;/li&gt;
&lt;li&gt;Fill the decision id and the input and output parameters.&lt;/li&gt;
&lt;li&gt;Save the diagram in &lt;code&gt;src/main/resources&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Add a test method to test the decision table to your JUnit test.&lt;/li&gt;
&lt;li&gt;Integrate the decision table into your process diagram: Morph the review task to a business rules task. Fill the properties to reference your DMN diagram. The decision result should be mapped as &lt;code&gt;singleEntry&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Adjust your JUnit test to check the process flow with your rules. Add the table.dmn as deployment resource. Remark: You can deploy more than one resource at a time with &lt;code&gt;@Deployment(resources = {&amp;quot;process.bpmn&amp;quot;, &amp;quot;table.dmn&amp;quot;})&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Deploy the app to your application server with &lt;code&gt;mvn clean wildfly:deploy&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Run the process in the task list.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;improvements&#34;&gt;Improvements&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Use juel as expressionLanguage for input rule. You can change it with right click on the cell.&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;boolean contains(CharSequence s)&lt;/code&gt; method of &lt;code&gt;String&lt;/code&gt; inside juel expression: The rule entry for &amp;ldquo;tweet containing &amp;lsquo;Camunda&amp;rsquo; can be published&amp;rdquo; is: &lt;code&gt;content.contains(&amp;quot;Camunda&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>